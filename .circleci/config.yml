version: 2.1
orbs:
  docker: circleci/docker@1.4.0

filter: &filter
  filters:
    branches:
      only:
        - anna*


workflows:
  build-docker-images:
    jobs:
      - build-docker-image-prot-data
      - build-docker-image-signature_matrices
      - build-docker-image-mrna-data
      - build-docker-image-correlation
      - build-docker-image-comparison
      - build-docker-image-figures
      - build-docker-image-imm-subtypes
      # - build-docker-image-xcell
      # - build-docker-image-cibersort
      # - build-docker-image-mcpcounter
      # - build-docker-image-epic
  # test-with-cwl:
  #   jobs:
  #     - rep-bulk:
  #         <<: *filter
  #     - rep-bulk-with-imputation:
  #         <<: *filter
  #     - test-dl-brca:
  #         <<: *filter
  #     - test-dl-ccrcc:
  #         <<: *filter
  #     - test-dl-luad:
  #         <<: *filter
  #     - test-dl-colon:
  #         <<: *filter
  #     - test-dl-ovarian:
  #         <<: *filter
  #     - test-dl-hnscc:
  #         <<: *filter
  #     - test-dl-endometrial:
  #         <<: *filter
  #     - test-dl-gbm:
  #         <<: *filter
  #     - imputation:
  #         requires:
  #           - test-dl-endometrial

executors:
  ubuntu:
    machine:
      image: ubuntu-2004:202010-01


commands:
  download-data:
    parameters:
      cancerType:
        type: string
        default: 'brca'
    steps:
      - checkout
      - run:
          name: Install dependencies to VM
          command: pip3 install cwltool
      - run:
          name: Download data
          command: cd ~/project/protData && cwltool prot-data-cwl-tool.cwl --cancerType << parameters.cancerType >>
      - run:
          name: Test that file was downloaded
          command: |
            if [ -f ~/project/protData/file.tsv ]; then
                echo "~/project/protData/file.tsv successfully created!"
            else
                echo "Test cases failed !!!"
                exit 1
            fi
      - persist_to_workspace:
          root: protData
          paths:
            - file.tsv
  build-docker-image:
    parameters:
      alg:
        type: string
        default: 'xcell'
      dir:
        type: string
        default: 'tumorDeconvAlgs'
    steps:
      - checkout
      - docker/check
      - run:
          name: Build << parameters.alg >> Docker image
          command: |
            cd ~/project/<< parameters.dir >>
            docker build --cache-from tumordeconv/<< parameters.alg >> -t tumordeconv/<< parameters.alg >> .
            docker push tumordeconv/<< parameters.alg >>
      # add in docker pull later
      # docker pull tumordeconv/<< parameters.alg >>

jobs:
  build-docker-image-prot-data:
    executor: ubuntu
    steps:
      - build-docker-image:
          alg: 'prot-data'
          dir: 'protData'
  build-docker-image-signature_matrices:
    executor: ubuntu
    steps:
      - build-docker-image:
          alg: 'signature_matrices'
          dir: 'signature_matrices'
  build-docker-image-mrna-data:
    executor: ubuntu
    steps:
      - build-docker-image:
          alg: 'mrna-data'
          dir: 'mRNAData'
  build-docker-image-correlation:
    executor: ubuntu
    steps:
      - build-docker-image:
          alg: 'correlation'
          dir: 'metrics/correlations'
  build-docker-image-comparison:
    executor: ubuntu
    steps:
      - build-docker-image:
          alg: 'comparison'
          dir: 'metrics/distance'
  build-docker-image-figures:
    executor: ubuntu
    steps:
      - build-docker-image:
          alg: 'figures'
          dir: 'metrics/figures'
  build-docker-image-imm-subtypes:
    executor: ubuntu
    steps:
      - build-docker-image:
          alg: 'imm-subtypes'
          dir: 'metrics/imm-subtypes'
  build-docker-image-cibersort:
    executor: ubuntu
    steps:
      - build-docker-image:
          alg: 'cibersort'
  build-docker-image-epic:
    executor: ubuntu
    steps:
      - build-docker-image:
          alg: 'epic'
  build-docker-image-mcpcounter:
    executor: ubuntu
    steps:
      - build-docker-image:
          alg: 'mcpcounter'
  build-docker-image-xcell:
    executor: ubuntu
    steps:
      - build-docker-image
  test-dl-brca:
    executor: ubuntu
    steps:
      - download-data:
          cancerType: 'brca'
  test-dl-ccrcc:
    executor: ubuntu
    steps:
      - download-data:
          cancerType: 'ccrcc'
  test-dl-luad:
    executor: ubuntu
    steps:
      - download-data:
          cancerType: 'luad'
  test-dl-colon:
    executor: ubuntu
    steps:
      - download-data:
          cancerType: 'colon'
  test-dl-ovarian:
    executor: ubuntu
    steps:
      - download-data:
          cancerType: 'ovarian'
  test-dl-endometrial:
    executor: ubuntu
    steps:
      - download-data:
          cancerType: 'endometrial'
  test-dl-hnscc:
    executor: ubuntu
    steps:
      - download-data:
          cancerType: 'hnscc'
  test-dl-gbm:
    executor: ubuntu
    steps:
      - download-data:
          cancerType: 'gbm'
  imputation:
    executor: ubuntu
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: ls /tmp/workspace
      - run:
          name: Slim down test file
          command: head -n 1000 /tmp/workspace/file.tsv > /tmp/workspace/slim_file.tsv
      - run:
          name: Install dependencies to VM
          command: pip3 install cwltool
      - run:
          name: Run imputation
          command: cd ~/project/imputation && cwltool imputation-tool.cwl --input_f /tmp/workspace/slim_file.tsv --use_missForest false
          no_output_timeout: 1h
      - run:
          name: Test that file was imputed
          command: |
            if [ -f ~/project/imputation/imputed_file.tsv ]; then
                echo "~/project/imputation/imputed_file.tsv successfully created!"
            else
                echo "Test cases failed !!!"
                exit 1
            fi
      - persist_to_workspace:
          root: imputation
          paths:
            - imputed_file.tsv
  rep-bulk:
    executor: ubuntu
    steps:
      - checkout
      - run:
          name: Install dependencies to VM
          command: pip3 install cwltool
      - run:
          name: Run rep-bulk
          command: |
            cd ~/project/tumorDeconvAlgs/BayesDeBulk
            cwltool bayes-de-bulk.cwl \
              --expressionFile=../../toy_data/TOY_rna_expression_imputed.tsv \
              --signatureMatrix=../../toy_data/TOY_signature_matrix.tsv
          no_output_timeout: 1h
      - run:
          name: Test that TSV output was created
          command: |
            if [ -f ~/project/tumorDeconvAlgs/BayesDeBulk/*-deconv.tsv ]; then
                echo "~/project/tumorDeconvAlgs/BayesDeBulk/*-deconv.tsv successfully created!"
            else
                echo "Test cases failed !!!"
                exit 1
            fi
  rep-bulk-with-imputation:
    executor: ubuntu
    steps:
      - checkout
      - run:
          name: Install dependencies to VM
          command: pip3 install cwltool
      - run:
          name: Run rep-bulk
          command: |
              cd ~/project/tumorDeconvAlgs/BayesDeBulk
              cwltool bayes-de-bulk.cwl \
                --expressionFile=../../toy_data/TOY_rna_expression_withNA.tsv \
                --signatureMatrix=../../toy_data/TOY_signature_matrix.tsv \
                --rowMeansImputation=TRUE
          no_output_timeout: 1h
      - run:
          name: Test that TSV output was created
          command: |
            if [ -f ~/project/tumorDeconvAlgs/BayesDeBulk/*-deconv.tsv ]; then
                echo "~/project/tumorDeconvAlgs/BayesDeBulk/*-deconv.tsv successfully created!"
            else
                echo "Test cases failed !!!"
                exit 1
            fi
